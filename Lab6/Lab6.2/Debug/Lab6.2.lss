
Lab6.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009c4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20000000  000009c4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000060  2000043c  00000e00  0002043c  2**2
                  ALLOC
  3 .stack        00002004  2000049c  00000e60  0002043c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020464  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000f33a  00000000  00000000  000204bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a54  00000000  00000000  0002f7f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000c5e  00000000  00000000  0003024b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000140  00000000  00000000  00030ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000108  00000000  00000000  00030fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000116db  00000000  00000000  000310f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000025c7  00000000  00000000  000427cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006f2ee  00000000  00000000  00044d93  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000460  00000000  00000000  000b4084  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	a0 24 00 20 19 01 00 00 15 01 00 00 15 01 00 00     .$. ............
	...
  2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
  3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  8c:	15 01 00 00 15 01 00 00 00 00 00 00 00 00 00 00     ................
  9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	2000043c 	.word	0x2000043c
  d4:	00000000 	.word	0x00000000
  d8:	000009c4 	.word	0x000009c4

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000440 	.word	0x20000440
 108:	000009c4 	.word	0x000009c4
 10c:	000009c4 	.word	0x000009c4
 110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
 118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
 11a:	4a23      	ldr	r2, [pc, #140]	; (1a8 <Reset_Handler+0x90>)
 11c:	4b23      	ldr	r3, [pc, #140]	; (1ac <Reset_Handler+0x94>)
 11e:	429a      	cmp	r2, r3
 120:	d009      	beq.n	136 <Reset_Handler+0x1e>
 122:	4b22      	ldr	r3, [pc, #136]	; (1ac <Reset_Handler+0x94>)
 124:	4a20      	ldr	r2, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
 126:	e003      	b.n	130 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
 128:	6811      	ldr	r1, [r2, #0]
 12a:	6019      	str	r1, [r3, #0]
 12c:	3304      	adds	r3, #4
 12e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 130:	491f      	ldr	r1, [pc, #124]	; (1b0 <Reset_Handler+0x98>)
 132:	428b      	cmp	r3, r1
 134:	d3f8      	bcc.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
 136:	4b1f      	ldr	r3, [pc, #124]	; (1b4 <Reset_Handler+0x9c>)
 138:	e002      	b.n	140 <Reset_Handler+0x28>
                *pDest++ = 0;
 13a:	2200      	movs	r2, #0
 13c:	601a      	str	r2, [r3, #0]
 13e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
 140:	4a1d      	ldr	r2, [pc, #116]	; (1b8 <Reset_Handler+0xa0>)
 142:	4293      	cmp	r3, r2
 144:	d3f9      	bcc.n	13a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 146:	4a1d      	ldr	r2, [pc, #116]	; (1bc <Reset_Handler+0xa4>)
 148:	21ff      	movs	r1, #255	; 0xff
 14a:	4b1d      	ldr	r3, [pc, #116]	; (1c0 <Reset_Handler+0xa8>)
 14c:	438b      	bics	r3, r1
 14e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 150:	39fd      	subs	r1, #253	; 0xfd
 152:	2390      	movs	r3, #144	; 0x90
 154:	005b      	lsls	r3, r3, #1
 156:	4a1b      	ldr	r2, [pc, #108]	; (1c4 <Reset_Handler+0xac>)
 158:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 15a:	4a1b      	ldr	r2, [pc, #108]	; (1c8 <Reset_Handler+0xb0>)
 15c:	78d3      	ldrb	r3, [r2, #3]
 15e:	2503      	movs	r5, #3
 160:	43ab      	bics	r3, r5
 162:	2402      	movs	r4, #2
 164:	4323      	orrs	r3, r4
 166:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 168:	78d3      	ldrb	r3, [r2, #3]
 16a:	270c      	movs	r7, #12
 16c:	43bb      	bics	r3, r7
 16e:	2608      	movs	r6, #8
 170:	4333      	orrs	r3, r6
 172:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 174:	4b15      	ldr	r3, [pc, #84]	; (1cc <Reset_Handler+0xb4>)
 176:	7b98      	ldrb	r0, [r3, #14]
 178:	2230      	movs	r2, #48	; 0x30
 17a:	4390      	bics	r0, r2
 17c:	2220      	movs	r2, #32
 17e:	4310      	orrs	r0, r2
 180:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 182:	7b99      	ldrb	r1, [r3, #14]
 184:	43b9      	bics	r1, r7
 186:	4331      	orrs	r1, r6
 188:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 18a:	7b9a      	ldrb	r2, [r3, #14]
 18c:	43aa      	bics	r2, r5
 18e:	4322      	orrs	r2, r4
 190:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 192:	4a0f      	ldr	r2, [pc, #60]	; (1d0 <Reset_Handler+0xb8>)
 194:	6851      	ldr	r1, [r2, #4]
 196:	2380      	movs	r3, #128	; 0x80
 198:	430b      	orrs	r3, r1
 19a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 19c:	4b0d      	ldr	r3, [pc, #52]	; (1d4 <Reset_Handler+0xbc>)
 19e:	4798      	blx	r3
        main();
 1a0:	4b0d      	ldr	r3, [pc, #52]	; (1d8 <Reset_Handler+0xc0>)
 1a2:	4798      	blx	r3
 1a4:	e7fe      	b.n	1a4 <Reset_Handler+0x8c>
 1a6:	46c0      	nop			; (mov r8, r8)
 1a8:	000009c4 	.word	0x000009c4
 1ac:	20000000 	.word	0x20000000
 1b0:	2000043c 	.word	0x2000043c
 1b4:	2000043c 	.word	0x2000043c
 1b8:	2000049c 	.word	0x2000049c
 1bc:	e000ed00 	.word	0xe000ed00
 1c0:	00000000 	.word	0x00000000
 1c4:	41007000 	.word	0x41007000
 1c8:	41005000 	.word	0x41005000
 1cc:	41004800 	.word	0x41004800
 1d0:	41004000 	.word	0x41004000
 1d4:	000007cd 	.word	0x000007cd
 1d8:	00000305 	.word	0x00000305

000001dc <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
        // Keep the default device state after reset
        SystemCoreClock = __SYSTEM_CLOCK;
 1dc:	4a01      	ldr	r2, [pc, #4]	; (1e4 <SystemInit+0x8>)
 1de:	4b02      	ldr	r3, [pc, #8]	; (1e8 <SystemInit+0xc>)
 1e0:	601a      	str	r2, [r3, #0]
        return;
}
 1e2:	4770      	bx	lr
 1e4:	000f4240 	.word	0x000f4240
 1e8:	20000000 	.word	0x20000000

000001ec <UARTInit>:
	// Turn off the I2C
	SERCOM3->I2CM.CTRLA.bit.ENABLE = 0x0u;
	
}

void UARTInit(void) {
 1ec:	b510      	push	{r4, lr}
	/* Initialize the SAM system */
	SystemInit();
 1ee:	4b1b      	ldr	r3, [pc, #108]	; (25c <UARTInit+0x70>)
 1f0:	4798      	blx	r3
	/* Switch to 8MHz clock (disable prescaler) */
	SYSCTRL->OSC8M.bit.PRESC = 0;
 1f2:	4a1b      	ldr	r2, [pc, #108]	; (260 <UARTInit+0x74>)
 1f4:	6a11      	ldr	r1, [r2, #32]
 1f6:	4b1b      	ldr	r3, [pc, #108]	; (264 <UARTInit+0x78>)
 1f8:	400b      	ands	r3, r1
 1fa:	6213      	str	r3, [r2, #32]
	
	/* port mux configuration*/
	PORT->Group[0].DIR.reg |= (1 << 10);                  /* Pin 10 configured as output */
 1fc:	4b1a      	ldr	r3, [pc, #104]	; (268 <UARTInit+0x7c>)
 1fe:	6819      	ldr	r1, [r3, #0]
 200:	2280      	movs	r2, #128	; 0x80
 202:	00d2      	lsls	r2, r2, #3
 204:	430a      	orrs	r2, r1
 206:	601a      	str	r2, [r3, #0]
	PORT->Group[0].PINCFG[PIN_PA11].bit.PMUXEN = 1;       /* Enabling peripheral functions */
 208:	224b      	movs	r2, #75	; 0x4b
 20a:	5c99      	ldrb	r1, [r3, r2]
 20c:	2001      	movs	r0, #1
 20e:	4301      	orrs	r1, r0
 210:	5499      	strb	r1, [r3, r2]
	PORT->Group[0].PINCFG[PIN_PA10].bit.PMUXEN = 1;       /* Enabling peripheral functions */
 212:	214a      	movs	r1, #74	; 0x4a
 214:	5c5a      	ldrb	r2, [r3, r1]
 216:	4302      	orrs	r2, r0
 218:	545a      	strb	r2, [r3, r1]
	
	/*PMUX: even = n/2, odd: (n-1)/2 */
	PORT->Group[0].PMUX[5].reg |= 0x02;                   /* Selecting peripheral function C */
 21a:	3915      	subs	r1, #21
 21c:	5c5a      	ldrb	r2, [r3, r1]
 21e:	2002      	movs	r0, #2
 220:	4302      	orrs	r2, r0
 222:	b2d2      	uxtb	r2, r2
 224:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PMUX[5].reg |= 0x20;                   /* Selecting peripheral function C */
 226:	5c5a      	ldrb	r2, [r3, r1]
 228:	2020      	movs	r0, #32
 22a:	4302      	orrs	r2, r0
 22c:	b2d2      	uxtb	r2, r2
 22e:	545a      	strb	r2, [r3, r1]
	
	/* APBCMASK */
	//PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0;			  /* SERCOM 0 enable*/
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0;
 230:	4a0e      	ldr	r2, [pc, #56]	; (26c <UARTInit+0x80>)
 232:	6a13      	ldr	r3, [r2, #32]
 234:	3931      	subs	r1, #49	; 0x31
 236:	430b      	orrs	r3, r1
 238:	6213      	str	r3, [r2, #32]

	/*GCLK configuration for sercom0 module: using generic clock generator 0, ID for sercom0, enable GCLK*/

	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE) |
 23a:	4a0d      	ldr	r2, [pc, #52]	; (270 <UARTInit+0x84>)
 23c:	4b0d      	ldr	r3, [pc, #52]	; (274 <UARTInit+0x88>)
 23e:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);

	
	/* configure SERCOM0 module for UART as Standard Frame, 8 Bit size, No parity, BAUDRATE:9600*/

	SERCOM0->USART.CTRLA.reg =
 240:	4b0d      	ldr	r3, [pc, #52]	; (278 <UARTInit+0x8c>)
 242:	4a0e      	ldr	r2, [pc, #56]	; (27c <UARTInit+0x90>)
 244:	601a      	str	r2, [r3, #0]
	SERCOM_USART_CTRLA_DORD | SERCOM_USART_CTRLA_MODE_USART_INT_CLK |
	SERCOM_USART_CTRLA_RXPO(3/*PAD3*/) | SERCOM_USART_CTRLA_TXPO(1/*PAD2*/);
	
	uint64_t br = (uint64_t)65536 * (8000000 - 16 * 9600) / 8000000;
	
	SERCOM0->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_CHSIZE(0/*8 bits*/);
 246:	22c0      	movs	r2, #192	; 0xc0
 248:	0292      	lsls	r2, r2, #10
 24a:	605a      	str	r2, [r3, #4]

	SERCOM0->USART.BAUD.reg = (uint16_t)br;
 24c:	4a0c      	ldr	r2, [pc, #48]	; (280 <UARTInit+0x94>)
 24e:	819a      	strh	r2, [r3, #12]

	SERCOM0->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
 250:	681a      	ldr	r2, [r3, #0]
 252:	3902      	subs	r1, #2
 254:	430a      	orrs	r2, r1
 256:	601a      	str	r2, [r3, #0]
}
 258:	bd10      	pop	{r4, pc}
 25a:	46c0      	nop			; (mov r8, r8)
 25c:	000001dd 	.word	0x000001dd
 260:	40000800 	.word	0x40000800
 264:	fffffcff 	.word	0xfffffcff
 268:	41004400 	.word	0x41004400
 26c:	40000400 	.word	0x40000400
 270:	00004014 	.word	0x00004014
 274:	40000c00 	.word	0x40000c00
 278:	42000800 	.word	0x42000800
 27c:	40310004 	.word	0x40310004
 280:	fffffb15 	.word	0xfffffb15

00000284 <timers>:

void timers(){
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
 284:	4a19      	ldr	r2, [pc, #100]	; (2ec <timers+0x68>)
 286:	4b1a      	ldr	r3, [pc, #104]	; (2f0 <timers+0x6c>)
 288:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TCC2_TC3;      // Use GCLK0 for TC3
	
	TC3->COUNT16.CTRLA.reg = TC_CTRLA_SWRST;                  // Reset TC3
 28a:	2201      	movs	r2, #1
 28c:	4b19      	ldr	r3, [pc, #100]	; (2f4 <timers+0x70>)
 28e:	801a      	strh	r2, [r3, #0]
	while (TC3->COUNT16.CTRLA.bit.SWRST);                     // Wait for completion
 290:	4b18      	ldr	r3, [pc, #96]	; (2f4 <timers+0x70>)
 292:	881b      	ldrh	r3, [r3, #0]
 294:	07db      	lsls	r3, r3, #31
 296:	d4fb      	bmi.n	290 <timers+0xc>

	PORT->Group[0].PINCFG[18].bit.PMUXEN = PORT_PINCFG_PMUXEN;// Enable PMUX for PA18
 298:	4a17      	ldr	r2, [pc, #92]	; (2f8 <timers+0x74>)
 29a:	2152      	movs	r1, #82	; 0x52
 29c:	5c53      	ldrb	r3, [r2, r1]
 29e:	2001      	movs	r0, #1
 2a0:	4303      	orrs	r3, r0
 2a2:	5453      	strb	r3, [r2, r1]
	PORT->Group[0].PMUX[9].bit.PMUXE = PORT_PMUX_PMUXE_E;     // Assign PA18 to TC3
 2a4:	3919      	subs	r1, #25
 2a6:	5c53      	ldrb	r3, [r2, r1]
 2a8:	200f      	movs	r0, #15
 2aa:	4383      	bics	r3, r0
 2ac:	2004      	movs	r0, #4
 2ae:	4303      	orrs	r3, r0
 2b0:	5453      	strb	r3, [r2, r1]
	PM->APBCMASK.reg = PM->APBCMASK.reg | PM_APBCMASK_TC3;    // Enable clock for TC3
 2b2:	4a12      	ldr	r2, [pc, #72]	; (2fc <timers+0x78>)
 2b4:	6a11      	ldr	r1, [r2, #32]
 2b6:	2380      	movs	r3, #128	; 0x80
 2b8:	011b      	lsls	r3, r3, #4
 2ba:	430b      	orrs	r3, r1
 2bc:	6213      	str	r3, [r2, #32]
	TC3->COUNT16.CTRLA.reg = TC_CTRLA_MODE_COUNT16 |          // 16-bit mode
 2be:	4b0d      	ldr	r3, [pc, #52]	; (2f4 <timers+0x70>)
 2c0:	22e4      	movs	r2, #228	; 0xe4
 2c2:	00d2      	lsls	r2, r2, #3
 2c4:	801a      	strh	r2, [r3, #0]
	TC_CTRLA_WAVEGEN_MFRQ | TC_CTRLA_PRESCALER_DIV1024;     // MFRQ mode, / 1024
	
	TC3->COUNT16.CC[0].reg = 7812;                           // Divide clock by 46875
 2c6:	4a0e      	ldr	r2, [pc, #56]	; (300 <timers+0x7c>)
 2c8:	831a      	strh	r2, [r3, #24]
	while (TC3->COUNT16.STATUS.reg & TC_STATUS_SYNCBUSY);     // Synchronize
 2ca:	4b0a      	ldr	r3, [pc, #40]	; (2f4 <timers+0x70>)
 2cc:	7bdb      	ldrb	r3, [r3, #15]
 2ce:	b25b      	sxtb	r3, r3
 2d0:	2b00      	cmp	r3, #0
 2d2:	dbfa      	blt.n	2ca <timers+0x46>

	TC3->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;                // Enable TC3
 2d4:	4a07      	ldr	r2, [pc, #28]	; (2f4 <timers+0x70>)
 2d6:	8813      	ldrh	r3, [r2, #0]
 2d8:	2102      	movs	r1, #2
 2da:	430b      	orrs	r3, r1
 2dc:	b29b      	uxth	r3, r3
 2de:	8013      	strh	r3, [r2, #0]
	while (TC3->COUNT16.STATUS.reg & TC_STATUS_SYNCBUSY);     // Synchronize
 2e0:	4b04      	ldr	r3, [pc, #16]	; (2f4 <timers+0x70>)
 2e2:	7bdb      	ldrb	r3, [r3, #15]
 2e4:	b25b      	sxtb	r3, r3
 2e6:	2b00      	cmp	r3, #0
 2e8:	dbfa      	blt.n	2e0 <timers+0x5c>
	
 2ea:	4770      	bx	lr
 2ec:	0000401b 	.word	0x0000401b
 2f0:	40000c00 	.word	0x40000c00
 2f4:	42002c00 	.word	0x42002c00
 2f8:	41004400 	.word	0x41004400
 2fc:	40000400 	.word	0x40000400
 300:	00001e84 	.word	0x00001e84

00000304 <main>:
{
 304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 306:	46ce      	mov	lr, r9
 308:	4647      	mov	r7, r8
 30a:	b580      	push	{r7, lr}
    SystemInit();
 30c:	4b2b      	ldr	r3, [pc, #172]	; (3bc <main+0xb8>)
 30e:	4798      	blx	r3
	UARTInit();
 310:	4b2b      	ldr	r3, [pc, #172]	; (3c0 <main+0xbc>)
 312:	4798      	blx	r3
	myprintf("\nHello World");
 314:	482b      	ldr	r0, [pc, #172]	; (3c4 <main+0xc0>)
 316:	4b2c      	ldr	r3, [pc, #176]	; (3c8 <main+0xc4>)
 318:	4798      	blx	r3
	initialize();
 31a:	4b2c      	ldr	r3, [pc, #176]	; (3cc <main+0xc8>)
 31c:	4798      	blx	r3
	timers();
 31e:	4b2c      	ldr	r3, [pc, #176]	; (3d0 <main+0xcc>)
 320:	4798      	blx	r3
	sendI2CDataArray(RTC_ADDR,START_PTR,curr_date,8);
 322:	2308      	movs	r3, #8
 324:	4a2b      	ldr	r2, [pc, #172]	; (3d4 <main+0xd0>)
 326:	2100      	movs	r1, #0
 328:	2068      	movs	r0, #104	; 0x68
 32a:	4c2b      	ldr	r4, [pc, #172]	; (3d8 <main+0xd4>)
 32c:	47a0      	blx	r4
		relocatePointer(RTC_ADDR,START_PTR);
 32e:	2100      	movs	r1, #0
 330:	2068      	movs	r0, #104	; 0x68
 332:	4d2a      	ldr	r5, [pc, #168]	; (3dc <main+0xd8>)
 334:	47a8      	blx	r5
		receiveI2CDataArray(RTC_ADDR,START_PTR,rec_date,8);
 336:	4c2a      	ldr	r4, [pc, #168]	; (3e0 <main+0xdc>)
 338:	2308      	movs	r3, #8
 33a:	0022      	movs	r2, r4
 33c:	2100      	movs	r1, #0
 33e:	2068      	movs	r0, #104	; 0x68
 340:	4e28      	ldr	r6, [pc, #160]	; (3e4 <main+0xe0>)
 342:	47b0      	blx	r6
		relocatePointer(RTC_ADDR,START_PTR);
 344:	2100      	movs	r1, #0
 346:	2068      	movs	r0, #104	; 0x68
 348:	47a8      	blx	r5
		seg.reg = rec_date[0];
 34a:	7825      	ldrb	r5, [r4, #0]
		min.reg = rec_date[1];
 34c:	7866      	ldrb	r6, [r4, #1]
		hour.reg = rec_date[2];
 34e:	78a7      	ldrb	r7, [r4, #2]
		date.reg = rec_date[4];
 350:	7922      	ldrb	r2, [r4, #4]
		month.reg = rec_date[5];
 352:	7963      	ldrb	r3, [r4, #5]
 354:	4698      	mov	r8, r3
		year.reg = rec_date[6];
 356:	79a3      	ldrb	r3, [r4, #6]
 358:	4699      	mov	r9, r3
		while((TC3->COUNT16.INTFLAG.reg & 0x01) == 0);
 35a:	4b23      	ldr	r3, [pc, #140]	; (3e8 <main+0xe4>)
 35c:	7b9b      	ldrb	r3, [r3, #14]
 35e:	07db      	lsls	r3, r3, #31
 360:	d5fb      	bpl.n	35a <main+0x56>
		TC3->COUNT16.INTFLAG.reg &= 0xF7;
 362:	4921      	ldr	r1, [pc, #132]	; (3e8 <main+0xe4>)
 364:	7b8b      	ldrb	r3, [r1, #14]
 366:	2008      	movs	r0, #8
 368:	4383      	bics	r3, r0
 36a:	738b      	strb	r3, [r1, #14]
		myprintf("%d%d/", date.field.dec_date, date.field.un_date);
 36c:	0691      	lsls	r1, r2, #26
 36e:	0f89      	lsrs	r1, r1, #30
 370:	0712      	lsls	r2, r2, #28
 372:	0f12      	lsrs	r2, r2, #28
 374:	481d      	ldr	r0, [pc, #116]	; (3ec <main+0xe8>)
 376:	4c14      	ldr	r4, [pc, #80]	; (3c8 <main+0xc4>)
 378:	47a0      	blx	r4
		myprintf("%d%d/", month.field.dec_month, month.field.un_month);
 37a:	4643      	mov	r3, r8
 37c:	06d9      	lsls	r1, r3, #27
 37e:	0fc9      	lsrs	r1, r1, #31
 380:	071a      	lsls	r2, r3, #28
 382:	0f12      	lsrs	r2, r2, #28
 384:	4819      	ldr	r0, [pc, #100]	; (3ec <main+0xe8>)
 386:	47a0      	blx	r4
		myprintf("%d%d ", year.field.dec_year, year.field.un_year);
 388:	464b      	mov	r3, r9
 38a:	0919      	lsrs	r1, r3, #4
 38c:	071a      	lsls	r2, r3, #28
 38e:	0f12      	lsrs	r2, r2, #28
 390:	4817      	ldr	r0, [pc, #92]	; (3f0 <main+0xec>)
 392:	47a0      	blx	r4
		myprintf("%d%d:", hour.field.dec_hour, hour.field.un_hour);
 394:	06f9      	lsls	r1, r7, #27
 396:	0fc9      	lsrs	r1, r1, #31
 398:	073a      	lsls	r2, r7, #28
 39a:	0f12      	lsrs	r2, r2, #28
 39c:	4f15      	ldr	r7, [pc, #84]	; (3f4 <main+0xf0>)
 39e:	0038      	movs	r0, r7
 3a0:	47a0      	blx	r4
		myprintf("%d%d:", min.field.dec_min, min.field.un_min);
 3a2:	0671      	lsls	r1, r6, #25
 3a4:	0f49      	lsrs	r1, r1, #29
 3a6:	0732      	lsls	r2, r6, #28
 3a8:	0f12      	lsrs	r2, r2, #28
 3aa:	0038      	movs	r0, r7
 3ac:	47a0      	blx	r4
		myprintf("%d%d\n", seg.field.dec_seg, seg.field.un_seg);
 3ae:	0669      	lsls	r1, r5, #25
 3b0:	0f49      	lsrs	r1, r1, #29
 3b2:	072a      	lsls	r2, r5, #28
 3b4:	0f12      	lsrs	r2, r2, #28
 3b6:	4810      	ldr	r0, [pc, #64]	; (3f8 <main+0xf4>)
 3b8:	47a0      	blx	r4
	while(1){
 3ba:	e7b8      	b.n	32e <main+0x2a>
 3bc:	000001dd 	.word	0x000001dd
 3c0:	000001ed 	.word	0x000001ed
 3c4:	0000096c 	.word	0x0000096c
 3c8:	000004b1 	.word	0x000004b1
 3cc:	00000661 	.word	0x00000661
 3d0:	00000285 	.word	0x00000285
 3d4:	20000004 	.word	0x20000004
 3d8:	00000715 	.word	0x00000715
 3dc:	00000751 	.word	0x00000751
 3e0:	20000458 	.word	0x20000458
 3e4:	00000789 	.word	0x00000789
 3e8:	42002c00 	.word	0x42002c00
 3ec:	0000097c 	.word	0x0000097c
 3f0:	00000984 	.word	0x00000984
 3f4:	0000098c 	.word	0x0000098c
 3f8:	00000994 	.word	0x00000994

000003fc <sendUART1char>:
static char uc;
static char zs;

static void sendUART1char(char s)
{
  while (!(SERCOM0->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE));
 3fc:	4b03      	ldr	r3, [pc, #12]	; (40c <sendUART1char+0x10>)
 3fe:	7e1b      	ldrb	r3, [r3, #24]
 400:	07db      	lsls	r3, r3, #31
 402:	d5fb      	bpl.n	3fc <sendUART1char>
  SERCOM0->USART.DATA.reg = s;
 404:	b280      	uxth	r0, r0
 406:	4b01      	ldr	r3, [pc, #4]	; (40c <sendUART1char+0x10>)
 408:	8518      	strh	r0, [r3, #40]	; 0x28
}
 40a:	4770      	bx	lr
 40c:	42000800 	.word	0x42000800

00000410 <myputchar>:

/* "print.h" uses this function for is's printf implementation */
static void myputchar(char c)
{
 410:	b510      	push	{r4, lr}
 412:	0004      	movs	r4, r0
  if(c=='\n')
 414:	280a      	cmp	r0, #10
 416:	d003      	beq.n	420 <myputchar+0x10>
    sendUART1char('\r');
  sendUART1char(c);
 418:	0020      	movs	r0, r4
 41a:	4b03      	ldr	r3, [pc, #12]	; (428 <myputchar+0x18>)
 41c:	4798      	blx	r3
}
 41e:	bd10      	pop	{r4, pc}
    sendUART1char('\r');
 420:	200d      	movs	r0, #13
 422:	4b01      	ldr	r3, [pc, #4]	; (428 <myputchar+0x18>)
 424:	4798      	blx	r3
 426:	e7f7      	b.n	418 <myputchar+0x8>
 428:	000003fd 	.word	0x000003fd

0000042c <out>:
    //return 0;
//}


static void out(char c) {
    *bf++ = c;
 42c:	4a02      	ldr	r2, [pc, #8]	; (438 <out+0xc>)
 42e:	6813      	ldr	r3, [r2, #0]
 430:	1c59      	adds	r1, r3, #1
 432:	6011      	str	r1, [r2, #0]
 434:	7018      	strb	r0, [r3, #0]
    }
 436:	4770      	bx	lr
 438:	20000460 	.word	0x20000460

0000043c <outDgt>:

static void outDgt(char dgt) {
 43c:	b510      	push	{r4, lr}
 43e:	0003      	movs	r3, r0
	out(dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10));
 440:	2809      	cmp	r0, #9
 442:	d907      	bls.n	454 <outDgt+0x18>
 444:	4a08      	ldr	r2, [pc, #32]	; (468 <outDgt+0x2c>)
 446:	7912      	ldrb	r2, [r2, #4]
 448:	2a00      	cmp	r2, #0
 44a:	d101      	bne.n	450 <outDgt+0x14>
 44c:	2057      	movs	r0, #87	; 0x57
 44e:	e002      	b.n	456 <outDgt+0x1a>
 450:	2037      	movs	r0, #55	; 0x37
 452:	e000      	b.n	456 <outDgt+0x1a>
 454:	2030      	movs	r0, #48	; 0x30
 456:	18c0      	adds	r0, r0, r3
 458:	b2c0      	uxtb	r0, r0
 45a:	4b04      	ldr	r3, [pc, #16]	; (46c <outDgt+0x30>)
 45c:	4798      	blx	r3
	zs=1;
 45e:	2201      	movs	r2, #1
 460:	4b01      	ldr	r3, [pc, #4]	; (468 <outDgt+0x2c>)
 462:	715a      	strb	r2, [r3, #5]
    }
 464:	bd10      	pop	{r4, pc}
 466:	46c0      	nop			; (mov r8, r8)
 468:	20000460 	.word	0x20000460
 46c:	0000042d 	.word	0x0000042d

00000470 <divOut>:
	
static void divOut(unsigned int div) {
 470:	b510      	push	{r4, lr}
    unsigned char dgt=0;
	num &= 0xffff; // just for testing the code  with 32 bit ints
 472:	4a0d      	ldr	r2, [pc, #52]	; (4a8 <divOut+0x38>)
 474:	6893      	ldr	r3, [r2, #8]
 476:	041b      	lsls	r3, r3, #16
 478:	0c1b      	lsrs	r3, r3, #16
 47a:	6093      	str	r3, [r2, #8]
    unsigned char dgt=0;
 47c:	2200      	movs	r2, #0
	while (num>=div) {
 47e:	e004      	b.n	48a <divOut+0x1a>
		num -= div;
 480:	1a1b      	subs	r3, r3, r0
 482:	4909      	ldr	r1, [pc, #36]	; (4a8 <divOut+0x38>)
 484:	608b      	str	r3, [r1, #8]
		dgt++;
 486:	3201      	adds	r2, #1
 488:	b2d2      	uxtb	r2, r2
	while (num>=div) {
 48a:	4b07      	ldr	r3, [pc, #28]	; (4a8 <divOut+0x38>)
 48c:	689b      	ldr	r3, [r3, #8]
 48e:	4283      	cmp	r3, r0
 490:	d2f6      	bcs.n	480 <divOut+0x10>
		}
	if (zs || dgt>0) 
 492:	4b05      	ldr	r3, [pc, #20]	; (4a8 <divOut+0x38>)
 494:	795b      	ldrb	r3, [r3, #5]
 496:	2b00      	cmp	r3, #0
 498:	d101      	bne.n	49e <divOut+0x2e>
 49a:	2a00      	cmp	r2, #0
 49c:	d002      	beq.n	4a4 <divOut+0x34>
		outDgt(dgt);
 49e:	0010      	movs	r0, r2
 4a0:	4b02      	ldr	r3, [pc, #8]	; (4ac <divOut+0x3c>)
 4a2:	4798      	blx	r3
    }	
 4a4:	bd10      	pop	{r4, pc}
 4a6:	46c0      	nop			; (mov r8, r8)
 4a8:	20000460 	.word	0x20000460
 4ac:	0000043d 	.word	0x0000043d

000004b0 <tfp_printf>:

void tfp_printf(char *fmt, ...)
	{
 4b0:	b40f      	push	{r0, r1, r2, r3}
 4b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 4b4:	46c6      	mov	lr, r8
 4b6:	b500      	push	{lr}
 4b8:	b082      	sub	sp, #8
 4ba:	ab08      	add	r3, sp, #32
 4bc:	cb10      	ldmia	r3!, {r4}
	va_list va;
	char ch;
	char* p;
	
	va_start(va,fmt);
 4be:	9301      	str	r3, [sp, #4]
	
	while ((ch=*(fmt++))) {
 4c0:	e0b0      	b.n	624 <tfp_printf+0x174>
			myputchar(ch);
			}
		else {
			char lz=0;
			char w=0;
			ch=*(fmt++);
 4c2:	3402      	adds	r4, #2
 4c4:	7829      	ldrb	r1, [r5, #0]
			if (ch=='0') {
 4c6:	2930      	cmp	r1, #48	; 0x30
 4c8:	d019      	beq.n	4fe <tfp_printf+0x4e>
			char lz=0;
 4ca:	2500      	movs	r5, #0
				ch=*(fmt++);
				lz=1;
				}
			if (ch>='0' && ch<='9') {
 4cc:	000b      	movs	r3, r1
 4ce:	3b30      	subs	r3, #48	; 0x30
 4d0:	b2db      	uxtb	r3, r3
 4d2:	2b09      	cmp	r3, #9
 4d4:	d929      	bls.n	52a <tfp_printf+0x7a>
			char w=0;
 4d6:	2600      	movs	r6, #0
				while (ch>='0' && ch<='9') {
					w=(((w<<2)+w)<<1)+ch-'0';
					ch=*fmt++;
					}
				}
			bf=buf;
 4d8:	4b5b      	ldr	r3, [pc, #364]	; (648 <tfp_printf+0x198>)
 4da:	001a      	movs	r2, r3
 4dc:	320c      	adds	r2, #12
 4de:	601a      	str	r2, [r3, #0]
			p=bf;
			zs=0;
 4e0:	2200      	movs	r2, #0
 4e2:	715a      	strb	r2, [r3, #5]
			switch (ch) {
 4e4:	2963      	cmp	r1, #99	; 0x63
 4e6:	d069      	beq.n	5bc <tfp_printf+0x10c>
 4e8:	d821      	bhi.n	52e <tfp_printf+0x7e>
 4ea:	2925      	cmp	r1, #37	; 0x25
 4ec:	d074      	beq.n	5d8 <tfp_printf+0x128>
 4ee:	2958      	cmp	r1, #88	; 0x58
 4f0:	d024      	beq.n	53c <tfp_printf+0x8c>
 4f2:	2900      	cmp	r1, #0
 4f4:	d100      	bne.n	4f8 <tfp_printf+0x48>
 4f6:	e0a0      	b.n	63a <tfp_printf+0x18a>
			p=bf;
 4f8:	4f53      	ldr	r7, [pc, #332]	; (648 <tfp_printf+0x198>)
 4fa:	370c      	adds	r7, #12
 4fc:	e050      	b.n	5a0 <tfp_printf+0xf0>
				ch=*(fmt++);
 4fe:	1cac      	adds	r4, r5, #2
 500:	7869      	ldrb	r1, [r5, #1]
				lz=1;
 502:	2501      	movs	r5, #1
 504:	e7e2      	b.n	4cc <tfp_printf+0x1c>
					w=(((w<<2)+w)<<1)+ch-'0';
 506:	00b2      	lsls	r2, r6, #2
 508:	b2d2      	uxtb	r2, r2
 50a:	18b2      	adds	r2, r6, r2
 50c:	b2d3      	uxtb	r3, r2
 50e:	005b      	lsls	r3, r3, #1
 510:	b2db      	uxtb	r3, r3
 512:	18cb      	adds	r3, r1, r3
 514:	b2db      	uxtb	r3, r3
 516:	3b30      	subs	r3, #48	; 0x30
 518:	b2de      	uxtb	r6, r3
					ch=*fmt++;
 51a:	7821      	ldrb	r1, [r4, #0]
 51c:	3401      	adds	r4, #1
				while (ch>='0' && ch<='9') {
 51e:	000b      	movs	r3, r1
 520:	3b30      	subs	r3, #48	; 0x30
 522:	b2db      	uxtb	r3, r3
 524:	2b09      	cmp	r3, #9
 526:	d9ee      	bls.n	506 <tfp_printf+0x56>
 528:	e7d6      	b.n	4d8 <tfp_printf+0x28>
 52a:	2600      	movs	r6, #0
 52c:	e7f7      	b.n	51e <tfp_printf+0x6e>
			switch (ch) {
 52e:	2973      	cmp	r1, #115	; 0x73
 530:	d04d      	beq.n	5ce <tfp_printf+0x11e>
 532:	d91c      	bls.n	56e <tfp_printf+0xbe>
 534:	2975      	cmp	r1, #117	; 0x75
 536:	d01c      	beq.n	572 <tfp_printf+0xc2>
 538:	2978      	cmp	r1, #120	; 0x78
 53a:	d1dd      	bne.n	4f8 <tfp_printf+0x48>
					divOut(10);
					outDgt(num);
					break;
				case 'x': 
				case 'X' : 
				    uc= ch=='X';
 53c:	3958      	subs	r1, #88	; 0x58
 53e:	424b      	negs	r3, r1
 540:	414b      	adcs	r3, r1
 542:	4f41      	ldr	r7, [pc, #260]	; (648 <tfp_printf+0x198>)
 544:	713b      	strb	r3, [r7, #4]
					num=va_arg(va, unsigned int);
 546:	9b01      	ldr	r3, [sp, #4]
 548:	1d1a      	adds	r2, r3, #4
 54a:	9201      	str	r2, [sp, #4]
 54c:	681b      	ldr	r3, [r3, #0]
 54e:	60bb      	str	r3, [r7, #8]
					divOut(0x1000);
 550:	2080      	movs	r0, #128	; 0x80
 552:	0140      	lsls	r0, r0, #5
 554:	4b3d      	ldr	r3, [pc, #244]	; (64c <tfp_printf+0x19c>)
 556:	4698      	mov	r8, r3
 558:	4798      	blx	r3
					divOut(0x100);
 55a:	2080      	movs	r0, #128	; 0x80
 55c:	0040      	lsls	r0, r0, #1
 55e:	47c0      	blx	r8
					divOut(0x10);
 560:	2010      	movs	r0, #16
 562:	47c0      	blx	r8
					outDgt(num);
 564:	7a38      	ldrb	r0, [r7, #8]
 566:	4b3a      	ldr	r3, [pc, #232]	; (650 <tfp_printf+0x1a0>)
 568:	4798      	blx	r3
			p=bf;
 56a:	370c      	adds	r7, #12
					break;
 56c:	e018      	b.n	5a0 <tfp_printf+0xf0>
			switch (ch) {
 56e:	2964      	cmp	r1, #100	; 0x64
 570:	d1c2      	bne.n	4f8 <tfp_printf+0x48>
					num=va_arg(va, unsigned int);
 572:	9b01      	ldr	r3, [sp, #4]
 574:	1d1a      	adds	r2, r3, #4
 576:	9201      	str	r2, [sp, #4]
 578:	681b      	ldr	r3, [r3, #0]
 57a:	4a33      	ldr	r2, [pc, #204]	; (648 <tfp_printf+0x198>)
 57c:	6093      	str	r3, [r2, #8]
					if (ch=='d' && (int)num<0) {
 57e:	2964      	cmp	r1, #100	; 0x64
 580:	d014      	beq.n	5ac <tfp_printf+0xfc>
					divOut(10000);
 582:	4834      	ldr	r0, [pc, #208]	; (654 <tfp_printf+0x1a4>)
 584:	4f31      	ldr	r7, [pc, #196]	; (64c <tfp_printf+0x19c>)
 586:	47b8      	blx	r7
					divOut(1000);
 588:	20fa      	movs	r0, #250	; 0xfa
 58a:	0080      	lsls	r0, r0, #2
 58c:	47b8      	blx	r7
					divOut(100);
 58e:	2064      	movs	r0, #100	; 0x64
 590:	47b8      	blx	r7
					divOut(10);
 592:	200a      	movs	r0, #10
 594:	47b8      	blx	r7
					outDgt(num);
 596:	4f2c      	ldr	r7, [pc, #176]	; (648 <tfp_printf+0x198>)
 598:	7a38      	ldrb	r0, [r7, #8]
 59a:	4b2d      	ldr	r3, [pc, #180]	; (650 <tfp_printf+0x1a0>)
 59c:	4798      	blx	r3
			p=bf;
 59e:	370c      	adds	r7, #12
				case '%' :
					out('%');
				default:
					break;
				}
			*bf=0;
 5a0:	4b29      	ldr	r3, [pc, #164]	; (648 <tfp_printf+0x198>)
 5a2:	2200      	movs	r2, #0
 5a4:	6819      	ldr	r1, [r3, #0]
 5a6:	700a      	strb	r2, [r1, #0]
			bf=p;
 5a8:	601f      	str	r7, [r3, #0]
			while (*bf++ && w > 0)
 5aa:	e01d      	b.n	5e8 <tfp_printf+0x138>
					if (ch=='d' && (int)num<0) {
 5ac:	2b00      	cmp	r3, #0
 5ae:	dae8      	bge.n	582 <tfp_printf+0xd2>
						num = -(int)num;
 5b0:	425b      	negs	r3, r3
 5b2:	6093      	str	r3, [r2, #8]
						out('-');
 5b4:	202d      	movs	r0, #45	; 0x2d
 5b6:	4b28      	ldr	r3, [pc, #160]	; (658 <tfp_printf+0x1a8>)
 5b8:	4798      	blx	r3
 5ba:	e7e2      	b.n	582 <tfp_printf+0xd2>
					out((char)(va_arg(va, int)));
 5bc:	9b01      	ldr	r3, [sp, #4]
 5be:	1d1a      	adds	r2, r3, #4
 5c0:	9201      	str	r2, [sp, #4]
 5c2:	7818      	ldrb	r0, [r3, #0]
 5c4:	4b24      	ldr	r3, [pc, #144]	; (658 <tfp_printf+0x1a8>)
 5c6:	4798      	blx	r3
			p=bf;
 5c8:	4f1f      	ldr	r7, [pc, #124]	; (648 <tfp_printf+0x198>)
 5ca:	370c      	adds	r7, #12
					break;
 5cc:	e7e8      	b.n	5a0 <tfp_printf+0xf0>
					p=va_arg(va, char*);
 5ce:	9b01      	ldr	r3, [sp, #4]
 5d0:	1d1a      	adds	r2, r3, #4
 5d2:	9201      	str	r2, [sp, #4]
 5d4:	681f      	ldr	r7, [r3, #0]
					break;
 5d6:	e7e3      	b.n	5a0 <tfp_printf+0xf0>
					out('%');
 5d8:	2025      	movs	r0, #37	; 0x25
 5da:	4b1f      	ldr	r3, [pc, #124]	; (658 <tfp_printf+0x1a8>)
 5dc:	4798      	blx	r3
			p=bf;
 5de:	4f1a      	ldr	r7, [pc, #104]	; (648 <tfp_printf+0x198>)
 5e0:	370c      	adds	r7, #12
 5e2:	e7dd      	b.n	5a0 <tfp_printf+0xf0>
				w--;
 5e4:	3e01      	subs	r6, #1
 5e6:	b2f6      	uxtb	r6, r6
			while (*bf++ && w > 0)
 5e8:	4a17      	ldr	r2, [pc, #92]	; (648 <tfp_printf+0x198>)
 5ea:	6813      	ldr	r3, [r2, #0]
 5ec:	1c59      	adds	r1, r3, #1
 5ee:	6011      	str	r1, [r2, #0]
 5f0:	781b      	ldrb	r3, [r3, #0]
 5f2:	2b00      	cmp	r3, #0
 5f4:	d006      	beq.n	604 <tfp_printf+0x154>
 5f6:	2e00      	cmp	r6, #0
 5f8:	d1f4      	bne.n	5e4 <tfp_printf+0x134>
 5fa:	e003      	b.n	604 <tfp_printf+0x154>
			while (w-- > 0) 
				myputchar(lz ? '0' : ' ');
 5fc:	2020      	movs	r0, #32
 5fe:	4b17      	ldr	r3, [pc, #92]	; (65c <tfp_printf+0x1ac>)
 600:	4798      	blx	r3
			while (w-- > 0) 
 602:	4646      	mov	r6, r8
 604:	1e73      	subs	r3, r6, #1
 606:	b2db      	uxtb	r3, r3
 608:	4698      	mov	r8, r3
 60a:	2e00      	cmp	r6, #0
 60c:	d006      	beq.n	61c <tfp_printf+0x16c>
				myputchar(lz ? '0' : ' ');
 60e:	2d00      	cmp	r5, #0
 610:	d0f4      	beq.n	5fc <tfp_printf+0x14c>
 612:	2030      	movs	r0, #48	; 0x30
 614:	e7f3      	b.n	5fe <tfp_printf+0x14e>
			while ((ch= *p++))
				myputchar(ch);
 616:	4b11      	ldr	r3, [pc, #68]	; (65c <tfp_printf+0x1ac>)
 618:	4798      	blx	r3
			while ((ch= *p++))
 61a:	002f      	movs	r7, r5
 61c:	1c7d      	adds	r5, r7, #1
 61e:	7838      	ldrb	r0, [r7, #0]
 620:	2800      	cmp	r0, #0
 622:	d1f8      	bne.n	616 <tfp_printf+0x166>
	while ((ch=*(fmt++))) {
 624:	1c65      	adds	r5, r4, #1
 626:	7820      	ldrb	r0, [r4, #0]
 628:	2800      	cmp	r0, #0
 62a:	d006      	beq.n	63a <tfp_printf+0x18a>
		if (ch!='%') {
 62c:	2825      	cmp	r0, #37	; 0x25
 62e:	d100      	bne.n	632 <tfp_printf+0x182>
 630:	e747      	b.n	4c2 <tfp_printf+0x12>
			myputchar(ch);
 632:	4b0a      	ldr	r3, [pc, #40]	; (65c <tfp_printf+0x1ac>)
 634:	4798      	blx	r3
	while ((ch=*(fmt++))) {
 636:	002c      	movs	r4, r5
 638:	e7f4      	b.n	624 <tfp_printf+0x174>
			}
		}
	abort:;
	va_end(va);
	}
 63a:	b002      	add	sp, #8
 63c:	bc04      	pop	{r2}
 63e:	4690      	mov	r8, r2
 640:	bcf0      	pop	{r4, r5, r6, r7}
 642:	bc08      	pop	{r3}
 644:	b004      	add	sp, #16
 646:	4718      	bx	r3
 648:	20000460 	.word	0x20000460
 64c:	00000471 	.word	0x00000471
 650:	0000043d 	.word	0x0000043d
 654:	00002710 	.word	0x00002710
 658:	0000042d 	.word	0x0000042d
 65c:	00000411 	.word	0x00000411

00000660 <initialize>:
#include "RTCControl.h"

void initialize(){
	
	/* Switch to 8MHz clock (disable prescaler) */
	SYSCTRL->OSC8M.bit.PRESC = 0;
 660:	4a23      	ldr	r2, [pc, #140]	; (6f0 <initialize+0x90>)
 662:	6a11      	ldr	r1, [r2, #32]
 664:	4b23      	ldr	r3, [pc, #140]	; (6f4 <initialize+0x94>)
 666:	400b      	ands	r3, r1
 668:	6213      	str	r3, [r2, #32]
	
	/* port mux configuration */
	PORT->Group[0].PINCFG[PIN_PA22].reg = PORT_PINCFG_PMUXEN | PORT_PINCFG_INEN | PORT_PINCFG_PULLEN; /* SDA */
 66a:	4b23      	ldr	r3, [pc, #140]	; (6f8 <initialize+0x98>)
 66c:	2207      	movs	r2, #7
 66e:	2156      	movs	r1, #86	; 0x56
 670:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PINCFG[PIN_PA23].reg = PORT_PINCFG_PMUXEN | PORT_PINCFG_INEN | PORT_PINCFG_PULLEN; /* SCL */
 672:	3101      	adds	r1, #1
 674:	545a      	strb	r2, [r3, r1]
	
	/* PMUX: even = n/2, odd: (n-1)/2 */
	PORT->Group[0].PMUX[11].reg |= 0x02u;
 676:	391c      	subs	r1, #28
 678:	5c5a      	ldrb	r2, [r3, r1]
 67a:	2002      	movs	r0, #2
 67c:	4302      	orrs	r2, r0
 67e:	b2d2      	uxtb	r2, r2
 680:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PMUX[11].reg |= 0x20u;
 682:	5c5a      	ldrb	r2, [r3, r1]
 684:	2020      	movs	r0, #32
 686:	4302      	orrs	r2, r0
 688:	b2d2      	uxtb	r2, r2
 68a:	545a      	strb	r2, [r3, r1]
	
	/* APBCMASK */
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM3;
 68c:	4a1b      	ldr	r2, [pc, #108]	; (6fc <initialize+0x9c>)
 68e:	6a13      	ldr	r3, [r2, #32]
 690:	391b      	subs	r1, #27
 692:	430b      	orrs	r3, r1
 694:	6213      	str	r3, [r2, #32]

	/*GCLK configuration for sercom3 module*/
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID (SERCOM3_GCLK_ID_CORE) |
 696:	4b1a      	ldr	r3, [pc, #104]	; (700 <initialize+0xa0>)
 698:	4a1a      	ldr	r2, [pc, #104]	; (704 <initialize+0xa4>)
 69a:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_ID (SERCOM3_GCLK_ID_SLOW) |
	GCLK_CLKCTRL_GEN(4) |
	GCLK_CLKCTRL_CLKEN;
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_SRC_OSC8M|GCLK_GENCTRL_GENEN|GCLK_GENCTRL_ID(4);
 69c:	6859      	ldr	r1, [r3, #4]
 69e:	4a1a      	ldr	r2, [pc, #104]	; (708 <initialize+0xa8>)
 6a0:	430a      	orrs	r2, r1
 6a2:	605a      	str	r2, [r3, #4]

	/* set configuration for SERCOM3 I2C module */
	SERCOM3->I2CM.CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN; /* smart mode enable */
 6a4:	2280      	movs	r2, #128	; 0x80
 6a6:	0052      	lsls	r2, r2, #1
 6a8:	4b18      	ldr	r3, [pc, #96]	; (70c <initialize+0xac>)
 6aa:	605a      	str	r2, [r3, #4]
	while (SERCOM3->I2CM.SYNCBUSY.reg); // waiting loading
 6ac:	4b17      	ldr	r3, [pc, #92]	; (70c <initialize+0xac>)
 6ae:	69db      	ldr	r3, [r3, #28]
 6b0:	2b00      	cmp	r3, #0
 6b2:	d1fb      	bne.n	6ac <initialize+0x4c>
	
	/* calculate BAUDRATE */
	uint64_t tmp_baud =((8000000/100000)-10-(8000000*250 /1000000000))/2;
	SERCOM3->I2CM.BAUD.bit.BAUD = SERCOM_I2CM_BAUD_BAUD((uint32_t)tmp_baud);
 6b4:	4915      	ldr	r1, [pc, #84]	; (70c <initialize+0xac>)
 6b6:	68ca      	ldr	r2, [r1, #12]
 6b8:	33ff      	adds	r3, #255	; 0xff
 6ba:	439a      	bics	r2, r3
 6bc:	3bdd      	subs	r3, #221	; 0xdd
 6be:	4313      	orrs	r3, r2
 6c0:	60cb      	str	r3, [r1, #12]
	while (SERCOM3->I2CM.SYNCBUSY.reg); // waiting loading
 6c2:	4b12      	ldr	r3, [pc, #72]	; (70c <initialize+0xac>)
 6c4:	69db      	ldr	r3, [r3, #28]
 6c6:	2b00      	cmp	r3, #0
 6c8:	d1fb      	bne.n	6c2 <initialize+0x62>
	// value equals 0x22 or decimal 34
	
	SERCOM3->I2CM.CTRLA.reg = SERCOM_I2CM_CTRLA_ENABLE   |/* enable module */
 6ca:	4a11      	ldr	r2, [pc, #68]	; (710 <initialize+0xb0>)
 6cc:	4b0f      	ldr	r3, [pc, #60]	; (70c <initialize+0xac>)
 6ce:	601a      	str	r2, [r3, #0]
	SERCOM_I2CM_CTRLA_MODE_I2C_MASTER |		/* i2c master mode */
	SERCOM_I2CM_CTRLA_SDAHOLD(3);		 /* SDA hold time to 600ns */
	while (SERCOM3->I2CM.SYNCBUSY.reg);  /* waiting loading */
 6d0:	4b0e      	ldr	r3, [pc, #56]	; (70c <initialize+0xac>)
 6d2:	69db      	ldr	r3, [r3, #28]
 6d4:	2b00      	cmp	r3, #0
 6d6:	d1fb      	bne.n	6d0 <initialize+0x70>

	SERCOM3->I2CM.STATUS.reg |= SERCOM_I2CM_STATUS_BUSSTATE(1); /* set to idle state */
 6d8:	4a0c      	ldr	r2, [pc, #48]	; (70c <initialize+0xac>)
 6da:	8b53      	ldrh	r3, [r2, #26]
 6dc:	2110      	movs	r1, #16
 6de:	430b      	orrs	r3, r1
 6e0:	b29b      	uxth	r3, r3
 6e2:	8353      	strh	r3, [r2, #26]
	while (SERCOM3->I2CM.SYNCBUSY.reg);  /* waiting loading */
 6e4:	4b09      	ldr	r3, [pc, #36]	; (70c <initialize+0xac>)
 6e6:	69db      	ldr	r3, [r3, #28]
 6e8:	2b00      	cmp	r3, #0
 6ea:	d1fb      	bne.n	6e4 <initialize+0x84>
	
}
 6ec:	4770      	bx	lr
 6ee:	46c0      	nop			; (mov r8, r8)
 6f0:	40000800 	.word	0x40000800
 6f4:	fffffcff 	.word	0xfffffcff
 6f8:	41004400 	.word	0x41004400
 6fc:	40000400 	.word	0x40000400
 700:	40000c00 	.word	0x40000c00
 704:	00004417 	.word	0x00004417
 708:	00010604 	.word	0x00010604
 70c:	42001400 	.word	0x42001400
 710:	00300016 	.word	0x00300016

00000714 <sendI2CDataArray>:

 void sendI2CDataArray(uint8_t SlAddr,uint8_t ptr, uint8_t ptrData[],uint8_t Size){
 714:	b530      	push	{r4, r5, lr}
		/******************  SENDING SEQUENCE  **********************/
		// Sending 4 bytes to an RTC. First Byte is the pointer of the RTC memory.
		/* slave address with write signal (0) */
		SERCOM3->I2CM.ADDR.reg = (SlAddr << 1) | 0;    /* Sending slave address in write mode */
 716:	0040      	lsls	r0, r0, #1
 718:	490c      	ldr	r1, [pc, #48]	; (74c <sendI2CDataArray+0x38>)
 71a:	6248      	str	r0, [r1, #36]	; 0x24
		while(!SERCOM3->I2CM.INTFLAG.bit.MB);		   /* MB = 1 if slave NACKS the address */
 71c:	490b      	ldr	r1, [pc, #44]	; (74c <sendI2CDataArray+0x38>)
 71e:	7e09      	ldrb	r1, [r1, #24]
 720:	07c9      	lsls	r1, r1, #31
 722:	d5fb      	bpl.n	71c <sendI2CDataArray+0x8>
 724:	2000      	movs	r0, #0
 726:	e008      	b.n	73a <sendI2CDataArray+0x26>
		
		for(int i=0; i<Size; i++) {
			/* placing the data from transmitting buffer to DATA register*/
			SERCOM3->I2CM.DATA.reg = ptrData[i];
 728:	5c15      	ldrb	r5, [r2, r0]
 72a:	2128      	movs	r1, #40	; 0x28
 72c:	4c07      	ldr	r4, [pc, #28]	; (74c <sendI2CDataArray+0x38>)
 72e:	5465      	strb	r5, [r4, r1]
			while(!SERCOM3->I2CM.INTFLAG.bit.MB){}; /* MB = 1 if slave NACKS the address */
 730:	4906      	ldr	r1, [pc, #24]	; (74c <sendI2CDataArray+0x38>)
 732:	7e09      	ldrb	r1, [r1, #24]
 734:	07c9      	lsls	r1, r1, #31
 736:	d5fb      	bpl.n	730 <sendI2CDataArray+0x1c>
		for(int i=0; i<Size; i++) {
 738:	3001      	adds	r0, #1
 73a:	4298      	cmp	r0, r3
 73c:	dbf4      	blt.n	728 <sendI2CDataArray+0x14>
		}

		/* After transferring the last byte stop condition will be sent */
		SERCOM3->I2CM.CTRLB.bit.CMD = 0x3;
 73e:	4a03      	ldr	r2, [pc, #12]	; (74c <sendI2CDataArray+0x38>)
 740:	6851      	ldr	r1, [r2, #4]
 742:	23c0      	movs	r3, #192	; 0xc0
 744:	029b      	lsls	r3, r3, #10
 746:	430b      	orrs	r3, r1
 748:	6053      	str	r3, [r2, #4]
		
}
 74a:	bd30      	pop	{r4, r5, pc}
 74c:	42001400 	.word	0x42001400

00000750 <relocatePointer>:
 }
 
 void relocatePointer(uint8_t SlAddr,uint8_t ptr){
	/******************  RELOCATING POINTER BEFORE RECEIVING  *************************/
	/* slave address with write signal (0) */
	SERCOM3->I2CM.ADDR.reg = (SlAddr << 1) | 0;    /* Sending slave address in write mode */
 750:	0040      	lsls	r0, r0, #1
 752:	4b0b      	ldr	r3, [pc, #44]	; (780 <relocatePointer+0x30>)
 754:	6258      	str	r0, [r3, #36]	; 0x24
	
	while(SERCOM3->I2CM.INTFLAG.bit.MB ==0);		   /* MB = 1 if slave NACKS the address */
 756:	4b0a      	ldr	r3, [pc, #40]	; (780 <relocatePointer+0x30>)
 758:	7e1b      	ldrb	r3, [r3, #24]
 75a:	07db      	lsls	r3, r3, #31
 75c:	d5fb      	bpl.n	756 <relocatePointer+0x6>
	SERCOM3->I2CM.DATA.reg = ptr;                 /* Sending address (seconds) for internal pointer */
 75e:	2328      	movs	r3, #40	; 0x28
 760:	4a07      	ldr	r2, [pc, #28]	; (780 <relocatePointer+0x30>)
 762:	54d1      	strb	r1, [r2, r3]
	
	while(SERCOM3->I2CM.INTFLAG.bit.MB ==0){};         /* MB = 1 if slave NACKS the address */
 764:	4b06      	ldr	r3, [pc, #24]	; (780 <relocatePointer+0x30>)
 766:	7e1b      	ldrb	r3, [r3, #24]
 768:	07db      	lsls	r3, r3, #31
 76a:	d5fb      	bpl.n	764 <relocatePointer+0x14>
	
	SERCOM3->I2CM.CTRLB.bit.CMD = 0x1;                 /* Sending repetead start condition */	
 76c:	4904      	ldr	r1, [pc, #16]	; (780 <relocatePointer+0x30>)
 76e:	684a      	ldr	r2, [r1, #4]
 770:	4b04      	ldr	r3, [pc, #16]	; (784 <relocatePointer+0x34>)
 772:	401a      	ands	r2, r3
 774:	2380      	movs	r3, #128	; 0x80
 776:	025b      	lsls	r3, r3, #9
 778:	4313      	orrs	r3, r2
 77a:	604b      	str	r3, [r1, #4]
 }
 77c:	4770      	bx	lr
 77e:	46c0      	nop			; (mov r8, r8)
 780:	42001400 	.word	0x42001400
 784:	fffcffff 	.word	0xfffcffff

00000788 <receiveI2CDataArray>:
void receiveI2CDataArray(uint8_t SlAddr,uint8_t ptr, uint8_t ptrData[],int Size){
 788:	b510      	push	{r4, lr}
		/******************  RECIEVING SEQUENCE  *************************/
	/* slave address with read signal (1) */
	SERCOM3->I2CM.ADDR.reg = (SlAddr << 1) | 1;
 78a:	0040      	lsls	r0, r0, #1
 78c:	2101      	movs	r1, #1
 78e:	4308      	orrs	r0, r1
 790:	490d      	ldr	r1, [pc, #52]	; (7c8 <receiveI2CDataArray+0x40>)
 792:	6248      	str	r0, [r1, #36]	; 0x24
	while(SERCOM3->I2CM.INTFLAG.bit.SB==0){};
 794:	490c      	ldr	r1, [pc, #48]	; (7c8 <receiveI2CDataArray+0x40>)
 796:	7e09      	ldrb	r1, [r1, #24]
 798:	0789      	lsls	r1, r1, #30
 79a:	d5fb      	bpl.n	794 <receiveI2CDataArray+0xc>
 79c:	2000      	movs	r0, #0
 79e:	e008      	b.n	7b2 <receiveI2CDataArray+0x2a>

	for(int i=0; i< Size-1; i++) {
		ptrData[i] = SERCOM3->I2CM.DATA.reg;
 7a0:	2128      	movs	r1, #40	; 0x28
 7a2:	4c09      	ldr	r4, [pc, #36]	; (7c8 <receiveI2CDataArray+0x40>)
 7a4:	5c61      	ldrb	r1, [r4, r1]
 7a6:	5411      	strb	r1, [r2, r0]
		while(SERCOM3->I2CM.INTFLAG.bit.SB==0){};
 7a8:	4907      	ldr	r1, [pc, #28]	; (7c8 <receiveI2CDataArray+0x40>)
 7aa:	7e09      	ldrb	r1, [r1, #24]
 7ac:	0789      	lsls	r1, r1, #30
 7ae:	d5fb      	bpl.n	7a8 <receiveI2CDataArray+0x20>
	for(int i=0; i< Size-1; i++) {
 7b0:	3001      	adds	r0, #1
 7b2:	1e59      	subs	r1, r3, #1
 7b4:	4288      	cmp	r0, r1
 7b6:	dbf3      	blt.n	7a0 <receiveI2CDataArray+0x18>
	}
	
	/* After receiving the last byte stop condition will be sent */
	SERCOM3->I2CM.CTRLB.bit.CMD = 0x3;
 7b8:	4a03      	ldr	r2, [pc, #12]	; (7c8 <receiveI2CDataArray+0x40>)
 7ba:	6851      	ldr	r1, [r2, #4]
 7bc:	23c0      	movs	r3, #192	; 0xc0
 7be:	029b      	lsls	r3, r3, #10
 7c0:	430b      	orrs	r3, r1
 7c2:	6053      	str	r3, [r2, #4]
 7c4:	bd10      	pop	{r4, pc}
 7c6:	46c0      	nop			; (mov r8, r8)
 7c8:	42001400 	.word	0x42001400

000007cc <__libc_init_array>:
 7cc:	b570      	push	{r4, r5, r6, lr}
 7ce:	4e0d      	ldr	r6, [pc, #52]	; (804 <__libc_init_array+0x38>)
 7d0:	4d0d      	ldr	r5, [pc, #52]	; (808 <__libc_init_array+0x3c>)
 7d2:	2400      	movs	r4, #0
 7d4:	1bad      	subs	r5, r5, r6
 7d6:	10ad      	asrs	r5, r5, #2
 7d8:	d005      	beq.n	7e6 <__libc_init_array+0x1a>
 7da:	00a3      	lsls	r3, r4, #2
 7dc:	58f3      	ldr	r3, [r6, r3]
 7de:	3401      	adds	r4, #1
 7e0:	4798      	blx	r3
 7e2:	42a5      	cmp	r5, r4
 7e4:	d1f9      	bne.n	7da <__libc_init_array+0xe>
 7e6:	f000 f8db 	bl	9a0 <_init>
 7ea:	4e08      	ldr	r6, [pc, #32]	; (80c <__libc_init_array+0x40>)
 7ec:	4d08      	ldr	r5, [pc, #32]	; (810 <__libc_init_array+0x44>)
 7ee:	2400      	movs	r4, #0
 7f0:	1bad      	subs	r5, r5, r6
 7f2:	10ad      	asrs	r5, r5, #2
 7f4:	d005      	beq.n	802 <__libc_init_array+0x36>
 7f6:	00a3      	lsls	r3, r4, #2
 7f8:	58f3      	ldr	r3, [r6, r3]
 7fa:	3401      	adds	r4, #1
 7fc:	4798      	blx	r3
 7fe:	42a5      	cmp	r5, r4
 800:	d1f9      	bne.n	7f6 <__libc_init_array+0x2a>
 802:	bd70      	pop	{r4, r5, r6, pc}
 804:	000009ac 	.word	0x000009ac
 808:	000009ac 	.word	0x000009ac
 80c:	000009ac 	.word	0x000009ac
 810:	000009b4 	.word	0x000009b4

00000814 <register_fini>:
 814:	4b03      	ldr	r3, [pc, #12]	; (824 <register_fini+0x10>)
 816:	b510      	push	{r4, lr}
 818:	2b00      	cmp	r3, #0
 81a:	d002      	beq.n	822 <register_fini+0xe>
 81c:	4802      	ldr	r0, [pc, #8]	; (828 <register_fini+0x14>)
 81e:	f000 f805 	bl	82c <atexit>
 822:	bd10      	pop	{r4, pc}
 824:	00000000 	.word	0x00000000
 828:	0000083d 	.word	0x0000083d

0000082c <atexit>:
 82c:	b510      	push	{r4, lr}
 82e:	0001      	movs	r1, r0
 830:	2300      	movs	r3, #0
 832:	2200      	movs	r2, #0
 834:	2000      	movs	r0, #0
 836:	f000 f81f 	bl	878 <__register_exitproc>
 83a:	bd10      	pop	{r4, pc}

0000083c <__libc_fini_array>:
 83c:	b570      	push	{r4, r5, r6, lr}
 83e:	4b09      	ldr	r3, [pc, #36]	; (864 <__libc_fini_array+0x28>)
 840:	4c09      	ldr	r4, [pc, #36]	; (868 <__libc_fini_array+0x2c>)
 842:	1ae4      	subs	r4, r4, r3
 844:	10a4      	asrs	r4, r4, #2
 846:	d009      	beq.n	85c <__libc_fini_array+0x20>
 848:	4a08      	ldr	r2, [pc, #32]	; (86c <__libc_fini_array+0x30>)
 84a:	18a5      	adds	r5, r4, r2
 84c:	00ad      	lsls	r5, r5, #2
 84e:	18ed      	adds	r5, r5, r3
 850:	682b      	ldr	r3, [r5, #0]
 852:	3c01      	subs	r4, #1
 854:	4798      	blx	r3
 856:	3d04      	subs	r5, #4
 858:	2c00      	cmp	r4, #0
 85a:	d1f9      	bne.n	850 <__libc_fini_array+0x14>
 85c:	f000 f8aa 	bl	9b4 <_fini>
 860:	bd70      	pop	{r4, r5, r6, pc}
 862:	46c0      	nop			; (mov r8, r8)
 864:	000009c0 	.word	0x000009c0
 868:	000009c4 	.word	0x000009c4
 86c:	3fffffff 	.word	0x3fffffff

00000870 <__retarget_lock_acquire_recursive>:
 870:	4770      	bx	lr
 872:	46c0      	nop			; (mov r8, r8)

00000874 <__retarget_lock_release_recursive>:
 874:	4770      	bx	lr
 876:	46c0      	nop			; (mov r8, r8)

00000878 <__register_exitproc>:
 878:	b5f0      	push	{r4, r5, r6, r7, lr}
 87a:	464e      	mov	r6, r9
 87c:	4645      	mov	r5, r8
 87e:	46de      	mov	lr, fp
 880:	4657      	mov	r7, sl
 882:	b5e0      	push	{r5, r6, r7, lr}
 884:	4d36      	ldr	r5, [pc, #216]	; (960 <__register_exitproc+0xe8>)
 886:	b083      	sub	sp, #12
 888:	0006      	movs	r6, r0
 88a:	6828      	ldr	r0, [r5, #0]
 88c:	4698      	mov	r8, r3
 88e:	000f      	movs	r7, r1
 890:	4691      	mov	r9, r2
 892:	f7ff ffed 	bl	870 <__retarget_lock_acquire_recursive>
 896:	4b33      	ldr	r3, [pc, #204]	; (964 <__register_exitproc+0xec>)
 898:	681c      	ldr	r4, [r3, #0]
 89a:	23a4      	movs	r3, #164	; 0xa4
 89c:	005b      	lsls	r3, r3, #1
 89e:	58e0      	ldr	r0, [r4, r3]
 8a0:	2800      	cmp	r0, #0
 8a2:	d052      	beq.n	94a <__register_exitproc+0xd2>
 8a4:	6843      	ldr	r3, [r0, #4]
 8a6:	2b1f      	cmp	r3, #31
 8a8:	dc13      	bgt.n	8d2 <__register_exitproc+0x5a>
 8aa:	1c5a      	adds	r2, r3, #1
 8ac:	9201      	str	r2, [sp, #4]
 8ae:	2e00      	cmp	r6, #0
 8b0:	d128      	bne.n	904 <__register_exitproc+0x8c>
 8b2:	9a01      	ldr	r2, [sp, #4]
 8b4:	3302      	adds	r3, #2
 8b6:	009b      	lsls	r3, r3, #2
 8b8:	6042      	str	r2, [r0, #4]
 8ba:	501f      	str	r7, [r3, r0]
 8bc:	6828      	ldr	r0, [r5, #0]
 8be:	f7ff ffd9 	bl	874 <__retarget_lock_release_recursive>
 8c2:	2000      	movs	r0, #0
 8c4:	b003      	add	sp, #12
 8c6:	bc3c      	pop	{r2, r3, r4, r5}
 8c8:	4690      	mov	r8, r2
 8ca:	4699      	mov	r9, r3
 8cc:	46a2      	mov	sl, r4
 8ce:	46ab      	mov	fp, r5
 8d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8d2:	4b25      	ldr	r3, [pc, #148]	; (968 <__register_exitproc+0xf0>)
 8d4:	2b00      	cmp	r3, #0
 8d6:	d03d      	beq.n	954 <__register_exitproc+0xdc>
 8d8:	20c8      	movs	r0, #200	; 0xc8
 8da:	0040      	lsls	r0, r0, #1
 8dc:	e000      	b.n	8e0 <__register_exitproc+0x68>
 8de:	bf00      	nop
 8e0:	2800      	cmp	r0, #0
 8e2:	d037      	beq.n	954 <__register_exitproc+0xdc>
 8e4:	22a4      	movs	r2, #164	; 0xa4
 8e6:	2300      	movs	r3, #0
 8e8:	0052      	lsls	r2, r2, #1
 8ea:	58a1      	ldr	r1, [r4, r2]
 8ec:	6043      	str	r3, [r0, #4]
 8ee:	6001      	str	r1, [r0, #0]
 8f0:	50a0      	str	r0, [r4, r2]
 8f2:	3240      	adds	r2, #64	; 0x40
 8f4:	5083      	str	r3, [r0, r2]
 8f6:	3204      	adds	r2, #4
 8f8:	5083      	str	r3, [r0, r2]
 8fa:	3301      	adds	r3, #1
 8fc:	9301      	str	r3, [sp, #4]
 8fe:	2300      	movs	r3, #0
 900:	2e00      	cmp	r6, #0
 902:	d0d6      	beq.n	8b2 <__register_exitproc+0x3a>
 904:	009a      	lsls	r2, r3, #2
 906:	4692      	mov	sl, r2
 908:	4482      	add	sl, r0
 90a:	464a      	mov	r2, r9
 90c:	2188      	movs	r1, #136	; 0x88
 90e:	4654      	mov	r4, sl
 910:	5062      	str	r2, [r4, r1]
 912:	22c4      	movs	r2, #196	; 0xc4
 914:	0052      	lsls	r2, r2, #1
 916:	4691      	mov	r9, r2
 918:	4481      	add	r9, r0
 91a:	464a      	mov	r2, r9
 91c:	3987      	subs	r1, #135	; 0x87
 91e:	4099      	lsls	r1, r3
 920:	6812      	ldr	r2, [r2, #0]
 922:	468b      	mov	fp, r1
 924:	430a      	orrs	r2, r1
 926:	4694      	mov	ip, r2
 928:	464a      	mov	r2, r9
 92a:	4661      	mov	r1, ip
 92c:	6011      	str	r1, [r2, #0]
 92e:	2284      	movs	r2, #132	; 0x84
 930:	4641      	mov	r1, r8
 932:	0052      	lsls	r2, r2, #1
 934:	50a1      	str	r1, [r4, r2]
 936:	2e02      	cmp	r6, #2
 938:	d1bb      	bne.n	8b2 <__register_exitproc+0x3a>
 93a:	0002      	movs	r2, r0
 93c:	465c      	mov	r4, fp
 93e:	328d      	adds	r2, #141	; 0x8d
 940:	32ff      	adds	r2, #255	; 0xff
 942:	6811      	ldr	r1, [r2, #0]
 944:	430c      	orrs	r4, r1
 946:	6014      	str	r4, [r2, #0]
 948:	e7b3      	b.n	8b2 <__register_exitproc+0x3a>
 94a:	0020      	movs	r0, r4
 94c:	304d      	adds	r0, #77	; 0x4d
 94e:	30ff      	adds	r0, #255	; 0xff
 950:	50e0      	str	r0, [r4, r3]
 952:	e7a7      	b.n	8a4 <__register_exitproc+0x2c>
 954:	6828      	ldr	r0, [r5, #0]
 956:	f7ff ff8d 	bl	874 <__retarget_lock_release_recursive>
 95a:	2001      	movs	r0, #1
 95c:	4240      	negs	r0, r0
 95e:	e7b1      	b.n	8c4 <__register_exitproc+0x4c>
 960:	20000438 	.word	0x20000438
 964:	0000099c 	.word	0x0000099c
 968:	00000000 	.word	0x00000000
 96c:	6c65480a 	.word	0x6c65480a
 970:	57206f6c 	.word	0x57206f6c
 974:	646c726f 	.word	0x646c726f
 978:	00000000 	.word	0x00000000
 97c:	64256425 	.word	0x64256425
 980:	0000002f 	.word	0x0000002f
 984:	64256425 	.word	0x64256425
 988:	00000020 	.word	0x00000020
 98c:	64256425 	.word	0x64256425
 990:	0000003a 	.word	0x0000003a
 994:	64256425 	.word	0x64256425
 998:	0000000a 	.word	0x0000000a

0000099c <_global_impure_ptr>:
 99c:	20000010                                ... 

000009a0 <_init>:
 9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 9a2:	46c0      	nop			; (mov r8, r8)
 9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 9a6:	bc08      	pop	{r3}
 9a8:	469e      	mov	lr, r3
 9aa:	4770      	bx	lr

000009ac <__init_array_start>:
 9ac:	00000815 	.word	0x00000815

000009b0 <__frame_dummy_init_array_entry>:
 9b0:	000000dd                                ....

000009b4 <_fini>:
 9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 9b6:	46c0      	nop			; (mov r8, r8)
 9b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 9ba:	bc08      	pop	{r3}
 9bc:	469e      	mov	lr, r3
 9be:	4770      	bx	lr

000009c0 <__fini_array_start>:
 9c0:	000000b5 	.word	0x000000b5
